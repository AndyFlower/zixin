1、什么是CAS？
CompareAndSwap,比较当前工作内存中的值和主内存中的值，如果相同则执行规定操作，否则继续比较直到主内存中的值一致为止。
CAS有3个操作数，内存值为V，旧的预期值为A，要修改的更新值为B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。

1.1、Unsafe:
是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地（native）方法来访问，Unsafe相当于开了一个后门，基于该类可以直接操作特定内存的数据。UnSafe类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，因为Java中CAS操作的执行依赖于UnSafe类的方法。
注意：Unsafe类的所有方法都是native修饰的，也就是说UnSafe类中的方法都直接调用操作系统底层资源执行相应任务。

1.2、变量valueOffset,表示该变量值在内存中的偏移地址，因为UnSafe就是根据内存偏移地址来获取数据的。

1.3、变量value用volatile修饰，保证了多线程之间的内存可见性

CAS的全称为Compare-And-Swap,它是一条CPU并发原语。
它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。

CAS并发原语体现在JAVA语言中就是sun.misc.Unsafe类中的各个方法。调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令，这是一种完全依赖于硬件的功能，通过它实现了原子操作。再次强调，由于CAS是一种系统源于，原语属于操作系统的范畴，是由若干条指令组成的，用于完成某个功能的一个过程，
并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是是CAS是一条CPU的原子指令，不会操作所谓的数据不一致问题。

paramObject:AtomicInteger对象本身
paramLong：该对象值的引用地址
paramInt：需要变动的数量
i：是通过paramObject和paramLong找出的主内存中真实的值
用该对象当前的值与i进行比较
如果相同，更新paramInt+i并且返回true
如果不同，继续取值然后再比较，直到更新完成。

public final int getAndAddInt(Object paramObject, long paramLong, int paramInt)
  {
    int i;
    do
      i = getIntVolatile(paramObject, paramLong);
    while (!(compareAndSwapInt(paramObject, paramLong, i, i + paramInt)));
    return i;
  }

假设线程A和线程B两个线程同时执行getAndAddInt操作（分别跑在不同的cpu上）
1、AtomicInteger里面的value原始值为3，即主内存中AtomicInteger的value为3，根据JMM模型，线程A和线程B各自持有一份值为3的value的副本分为到各自的工作内存。
2、线程A通过getIntVolatile(var1,var2)拿到value的值为3，这时线程A被挂起
3、线程B也通过geyIntVolatile(var1 ,var2)方法获取到value值为3，此时刚好线程B没有被挂起并执行compareAndSwapInt方法，此时比较内存值也为3，成功修改内存值为4，线程B执行完毕。
4、这时线程A恢复，执行compareAndSwapInt方法比较，发现自己手里的值数字3和主内存的值4数字不一致，说明该值已经被其他现场抢先一步修改过了，那A线程本次修改失败，只能重新获取重新来一次。
5、线程A重新获取value值，因为变量value被volatile修饰，所以其他线程对它的修改，线程A总是能够看到，线程A继续执行compareAndSwapInt进行比较替换，直到成功。



UnSafe类中的compareAndSwapInt是一个本地方法，该方法的实现位于unsafe.cpp中（可以看：http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/tip/src/share/vm/prims/unsafe.cpp），
UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))
  UnsafeWrapper("Unsafe_CompareAndSwapInt");
  oop p = JNIHandles::resolve(obj);
  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);
  return (jint)(Atomic::cmpxchg(x, addr, e)) == e;
UNSAFE_END
//先想办法拿到value在内存中的地址，通过Atomic::cmpxchg实现比较替换，其中参数x是即将更新的值，参数e是原内存的值

CAS的缺点；
1、循环时间长开销大
   在getAndAddInt方法执行时，有一个do-while，如果CAS失败，会一直进行尝试，如果CAS长时间一直不成功，可能会给CPU带来很大的开销。

2、只能保证一个共享变量的原子操作
3、引出来ABA问题